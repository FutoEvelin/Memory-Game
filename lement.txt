CARDS

import java.util.ArrayList;
import java.util.Random;

class Cards {
    ArrayList<Card> cards = new ArrayList<>();
    private Random random = new Random();

    public Cards() {
        setElements(cards);
        mix(cards);
    }

    public void setElements(ArrayList<Card> cards) {
        for (int i = 0; i < 2; i++) {
            cards.add(new Card("Back to the Future", "img/backToTheFutureImage.png", "img/back.png"));
            cards.add(new Card("Titanic", "img/titanicImage.png", "img/back.png"));
            cards.add(new Card("Harry Potter", "img/harryPotterImage.png", "img/back.png"));
            cards.add(new Card("The Godfather", "img/theGodFatherImage.png", "img/back.png"));
            cards.add(new Card("Forrest Gump", "img/forrestGumpImage.png", "img/back.png"));
            cards.add(new Card("Rocky", "img/rockyImage.png", "img/back.png"));
            cards.add(new Card("Pirates of the Caribbean", "img/piratesOfTheCaribbeanImage.png", "img/back.png"));
            cards.add(new Card("Oppenheimer", "img/oppenheimerImage.png", "img/back.png"));
            cards.add(new Card("Barbie", "img/barbieImage.png", "img/back.png"));
        }
    }

    public void mix(ArrayList<Card> cards) {
        for (int i = 0; i < cards.size(); i++) {
            int j = random.nextInt(cards.size());
            Card temp = cards.get(i);
            cards.set(i, cards.get(j));
            cards.set(j, temp);
        }
    }

    public ArrayList<Card> getCards() {
        return cards;
    }
}
-------------------------------------------------------------------------------------
CARD

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class Card {
        String name;
        ImageIcon cardImage;
        ImageIcon backImage;
        int width;
        int height;
        boolean chosen;
        public Card(String name, String imagePath, String backImagePath) {
            width=setWidth();
            height=setHeight();
            this.name = name;
            try {
                Image img = ImageIO.read(new File(imagePath));
                Image scaledImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
                this.cardImage = new ImageIcon(scaledImg);

                img = ImageIO.read(new File(backImagePath));
                scaledImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
                this.backImage = new ImageIcon(scaledImg);

            } catch (IOException e) {
                e.printStackTrace();
                this.cardImage = new ImageIcon();
            }
        }

        public int setWidth()
        {
            return this.width=105;
        }

        public int setHeight()
        {
            return this.height=144;
        }

        public void setChosen(boolean x)
        {
            this.chosen=x;
        }

        public boolean getChosen()
        {
            return this.chosen;
        }
        public String getName()
        {
            return name;
        }

        public int getWidth()
        {
            return width;
        }

        public int getHeigth()
        {
            return height;
        }

        public ImageIcon getCardImage() {
            return cardImage;
        }

        public ImageIcon getBackImage()
        {
            return backImage;

        }
}
-------------------------------------------------------------------------------------
CARDFRAME

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class CardFrame extends JFrame {
    private JPanel backgroundPanel;
    private JButton pointsButton;
    private int points;

    public CardFrame(String backgroundImagePath) {
        setTitle("Card Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1920, 1080);

        backgroundPanel = new JPanel() {
            private Image backgroundImage;

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                try {
                    backgroundImage = ImageIO.read(new File(backgroundImagePath));
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };

        backgroundPanel.setLayout(null);
        add(backgroundPanel);

        initializeCardPanel();
        addButtonToBackground(1200, 400, 150, 80);

        JLabel label = new JLabel();
        label.setText("Memory game");
        label.setFont(new Font("Broadway", Font.PLAIN, 35));
        label.setForeground(new Color(184, 215, 213));
        label.setBounds(633,130,350,40);
        backgroundPanel.add(label);
        setVisible(true);
    }

    private void initializeCardPanel() {
        Cards cardsInstance = new Cards();
        CardPanel cardPanel = new CardPanel(cardsInstance, getWidth(), getHeight(),this);
        backgroundPanel.add(cardPanel);
    }

    public void addButtonToBackground(int x, int y, int width, int height) {
        pointsButton = new JButton("Pontok: 0");
        pointsButton.setFont(new Font("Arial", Font.BOLD, 18));
        pointsButton.setBackground(new Color(184, 215, 213));
        pointsButton.setForeground(Color.WHITE);
        pointsButton.setEnabled(false);
        pointsButton.setBounds(x, y, width, height);

        backgroundPanel.add(pointsButton);
        backgroundPanel.repaint();
    }
    public JButton getPointsButton() {
        return pointsButton;
    }

    public void incrementPoints() {
        points++;
        SwingUtilities.invokeLater(() -> {
            pointsButton.setText("Pontok: " + points);
            pointsButton.repaint();
        });
    }

    public void decrementPoints() {
        points--;
        SwingUtilities.invokeLater(() -> {
            pointsButton.setText("Pontok: " + points);
            pointsButton.repaint();
        });
    }


    public static void main(String[] args) {
        new CardFrame("img/background.png");
    }
}
---------------------------------------------------------------------------
CARDPANEL

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class CardPanel extends JPanel {
    private Card firstCard=null;
    private Card secondCard=null;
    private JButton firstButton=null;
    private JButton secondButton=null;
    CardFrame frame;

    int points;
    public CardPanel(Cards cardsInstance, int frameWidth, int frameHeight,CardFrame frame) {
        this.frame=frame;
        setLayout(new GridLayout(3, 6));
        setBounds((frameWidth - 1000) / 2, (frameHeight - 680) / 2, 610, 450);

        points=0;
        ArrayList<Card> cards = cardsInstance.getCards();
        for (Card card : cards) {
            card.setChosen(false);
        }

        for (Card card : cards) {
            JButton button = new JButton(card.getBackImage());
            button.setPreferredSize(new Dimension(card.getWidth(), card.getHeigth()));
            button.setBorder(BorderFactory.createLineBorder(new Color(184, 215, 213), 3));
            button.addActionListener(e -> {

                if (card.getChosen()) {
                    JPanel panel = new JPanel();
                    panel.setBackground(new Color(216, 167, 209));
                    JLabel label = new JLabel("Ez mar ki lett valasztva");
                    label.setForeground(new Color(211,107,125));
                    panel.add(label);

                    JOptionPane.showMessageDialog(this, panel, "FigyelmeztetÃ©s", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                playSound("D:/2.ev/java/memoriajatek/res/sound/bubblepop.wav");
                button.setIcon(card.getCardImage());

                if(firstCard==null)
                {
                    firstCard=card;
                    firstButton=button;
                }else if(secondCard==null)
                {
                    secondCard = card;
                    secondButton = button;

                    if (firstCard.getName().equals(secondCard.getName())) {
                        firstButton.setIcon(firstCard.cardImage);
                        secondButton.setIcon(secondCard.cardImage);
                        firstCard.setChosen(true);
                        secondCard.setChosen(true);
                        firstCard = null;
                        secondCard = null;

                        points++;
                        frame.incrementPoints();

                        if (points == 9) {
                            ImageIcon gif=new ImageIcon("res/confetti.gif");
                            JLabel gifLabel = new JLabel(gif);

                            gifLabel.setSize(1920, 1080);
                            frame.getContentPane().add(gifLabel, 0);
                            frame.revalidate();
                            frame.repaint();


                            new Timer(3000, ex -> {
                                frame.getContentPane().remove(gifLabel);
                                frame.revalidate();
                                frame.repaint();
                            }).start();
                        }



                    }else{

                        frame.decrementPoints();
                        new Timer(1000, ae -> {
                            if (firstCard != null && secondCard != null) {
                                firstButton.setIcon(firstCard.getBackImage());
                                secondButton.setIcon(secondCard.getBackImage());
                                firstCard.setChosen(false);
                                secondCard.setChosen(false);
                                firstCard = null;
                                secondCard = null;
                                firstButton = null;
                                secondButton = null;
                            }
                        }).start();
                    }
                }


            });

            add(button);
        }

    }

    private void playSound(String filePath) {
        try {
            File audioFile = new File(filePath);
            if (!audioFile.exists()) {
                System.out.println("A fÃ¡jl nem talÃ¡lhatÃ³: " + filePath);
                return;
            }

            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(audioFile);
            Clip clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
            System.out.println("Hiba a hang lejÃ¡tszÃ¡sa kÃ¶zben: " + ex.getMessage());
        }
    }

}

----------------------------------------------------------------------------------
MENUFRAME

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class MenuFrame {

    private Image loadBackgroundImage(String path) {
        try {
            Image img = ImageIO.read(new File(path));
            return img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public MenuFrame() {

        JFrame menuFrame = new JFrame("Memory Game");
        menuFrame.setSize(1920, 1080);
        menuFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        menuFrame.setLocationRelativeTo(null);


        final Image scaledImg = loadBackgroundImage("img/menubackground.png");


        JPanel backgroundPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (scaledImg != null) {
                    g.drawImage(scaledImg, 0, 0, this);
                }
            }
        };
        backgroundPanel.setLayout(new GridBagLayout()); // KÃ¶zÃ©pre helyezÃ©s
        backgroundPanel.setOpaque(false);

        menuFrame.setContentPane(backgroundPanel);


        JButton startGameButton = new JButton("Start Game");
        JButton exitButton = new JButton("Exit");

        startGameButton.setBackground(new Color(188, 175, 207));
        startGameButton.setForeground(Color.WHITE);
        startGameButton.setFont(new Font("Arial", Font.BOLD, 20));

        exitButton.setBackground(new Color(102, 51, 153));
        exitButton.setForeground(Color.WHITE);
        exitButton.setFont(new Font("Arial", Font.BOLD, 20));


        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        buttonPanel.setOpaque(false);

        startGameButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        exitButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        buttonPanel.add(startGameButton);
        buttonPanel.add(Box.createVerticalStrut(20));
        buttonPanel.add(exitButton);


        backgroundPanel.add(buttonPanel);

        
        startGameButton.addActionListener(e -> {
            menuFrame.setVisible(false);
            CardFrame frame=new CardFrame("img/background.png");
        });

        exitButton.addActionListener(e -> System.exit(0));

        menuFrame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MenuFrame::new);
    }
}
------------------------------------------------------------
FACTSFRAME

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Collectors;

public class FactsFrame {

    private Image loadBackgroundImage(String path) {
        try {
            Image img = ImageIO.read(new File(path));
            return img.getScaledInstance(1920, 1080, Image.SCALE_SMOOTH);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void displayFileContent(String fileName) {
        String content = "";
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = reader.readLine()) != null) {
                content += line + "\n";
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error reading file: " + fileName, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }


        JFrame contentFrame = new JFrame("Facts - " + fileName);
        contentFrame.setSize(600, 400);
        contentFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Csak ezt az ablakot zÃ¡rja be
        contentFrame.setLocationRelativeTo(null);
        contentFrame.setBackground(new Color(184, 215, 213));

        JTextArea textArea = new JTextArea(content);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);

        JScrollPane scrollPane = new JScrollPane(textArea);
        contentFrame.add(scrollPane);

        contentFrame.setVisible(true);
    }



    public FactsFrame() {

        JFrame factsFrame = new JFrame("Facts");
        factsFrame.setSize(1920, 1080);
        factsFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        factsFrame.setLocationRelativeTo(null);

        final Image scaledImg = loadBackgroundImage("img/menubackground.png");
        JPanel backgroundPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (scaledImg != null) {
                    g.drawImage(scaledImg, 0, 0, this);
                }
            }
        };
        backgroundPanel.setLayout(new GridBagLayout());

        JButton backToTheFutureButton = new JButton("Back To The Future");
        backToTheFutureButton.setBackground(new Color(188, 175, 207));
        backToTheFutureButton.setForeground(Color.WHITE);
        backToTheFutureButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton titanicButton = new JButton("Titanic");
        titanicButton.setBackground(new Color(188, 175, 207));
        titanicButton.setForeground(Color.WHITE);
        titanicButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton harrypotterButton = new JButton("Harry Potter");
        harrypotterButton.setBackground(new Color(188, 175, 207));
        harrypotterButton.setForeground(Color.WHITE);
        harrypotterButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton theGodfatherButton = new JButton("The Godfather");
        theGodfatherButton.setBackground(new Color(188, 175, 207));
        theGodfatherButton.setForeground(Color.WHITE);
        theGodfatherButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton barbieButton = new JButton("Barbie");
        barbieButton.setBackground(new Color(188, 175, 207));
        barbieButton.setForeground(Color.WHITE);
        barbieButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton oppenheimerButton = new JButton("Oppenheimer");
        oppenheimerButton.setBackground(new Color(188, 175, 207));
        oppenheimerButton.setForeground(Color.WHITE);
        oppenheimerButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton piratesButton = new JButton("Pirates of the Caribbean");
        piratesButton.setBackground(new Color(188, 175, 207));
        piratesButton.setForeground(Color.WHITE);
        piratesButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton forestGumpButton = new JButton("Forest Gump");
        forestGumpButton.setBackground(new Color(188, 175, 207));
        forestGumpButton.setForeground(Color.WHITE);
        forestGumpButton.setFont(new Font("Arial", Font.BOLD, 20));

        JButton rockyButton = new JButton("Rocky");
        rockyButton.setBackground(new Color(188, 175, 207));
        rockyButton.setForeground(Color.WHITE);
        rockyButton.setFont(new Font("Arial", Font.BOLD, 20));


        backgroundPanel.add(backToTheFutureButton);
        backgroundPanel.add(titanicButton);
        backgroundPanel.add(harrypotterButton);
        backgroundPanel.add(theGodfatherButton);
        backgroundPanel.add(barbieButton);
        backgroundPanel.add(oppenheimerButton);
        backgroundPanel.add(piratesButton);
        backgroundPanel.add(forestGumpButton);
        backgroundPanel.add(rockyButton);

        backToTheFutureButton.addActionListener(e -> displayFileContent("files/back_to_the_future.txt"));
        titanicButton.addActionListener(e -> displayFileContent("files/titanic.txt"));
        harrypotterButton.addActionListener(e -> displayFileContent("files/harry_potter.txt"));
        theGodfatherButton.addActionListener(e -> displayFileContent("files/the_godfather.txt"));
        barbieButton.addActionListener(e -> displayFileContent("files/barbie.txt"));
        oppenheimerButton.addActionListener(e -> displayFileContent("files/oppenheimer.txt"));
        piratesButton.addActionListener(e -> displayFileContent("files/pirates_of_the_caribbean.txt"));
        forestGumpButton.addActionListener(e -> displayFileContent("files/forest_gump.txt"));
        rockyButton.addActionListener(e -> displayFileContent("files/rocky.txt"));

        factsFrame.add(backgroundPanel);
        factsFrame.setVisible(true);
    }

    public static void main(String[] args) {
        new FactsFrame();
    }
}
